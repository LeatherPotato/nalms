DROP TABLE IF EXISTS AUTHORS;
DROP TABLE IF EXISTS PUBLIUSHERS;
DROP TABLE IF EXISTS HOLDS;
DROP TABLE IF EXISTS LIBRARIANS;
DROP TABLE IF EXISTS USERS;
DROP TABLE IF EXISTS BOOKS;
DROP TABLE IF EXISTS BORROWED_BOOKS;
-- not atomic, will make a BOOK_DATA table for the book info as multiple copies of the same book can exist, meaning will be atomic this way
-- separated book data into its own table, but now the data is only in 2nd normal form due to the BookDataID/ISBN transitive dependancy.
DROP TABLE IF EXISTS NOTIFICATIONS;

-- added AUTOINCRIMENT and UNIQUE to all fields

CREATE TABLE IF NOT EXISTS AUTHORS (
    AuthorId INTEGER PRIMARY KEY ASC AUTOINCREMENT NOT NULL UNIQUE,
    AuthorIsbn TEXT,
    AuthorFirstName TEXT,
    AuthorLastName TEXT
);

CREATE TABLE IF NOT EXISTS PUBLISHERS (
    PublisherId INTEGER PRIMARY KEY ASC AUTOINCREMENT NOT NULL UNIQUE,
    PublisherIsbn TEXT,
    PublisherName TEXT
);

CREATE TABLE IF NOT EXISTS HOLDS (
    HoldID INTEGER PRIMARY KEY ASC AUTOINCREMENT NOT NULL UNIQUE,
    Status INTEGER
);

CREATE TABLE IF NOT EXISTS LIBRARIANS (
    UserId INTEGER PRIMARY KEY ASC AUTOINCREMENT NOT NULL UNIQUE,
    Schoolyear INTEGER,
    FirstName TEXT,
    LastName TEXT,
    Password TEXT,
    Permissions TEXT
);

CREATE TABLE IF NOT EXISTS USERS (
    UserId INTEGER PRIMARY KEY ASC AUTOINCREMENT NOT NULL UNIQUE,
    Schoolyear INTEGER,
    FirstName TEXT,
    LastName TEXT,
    BorrowedBooks TEXT,
    Password TEXT
);


CREATE TABLE IF NOT EXISTS BOOK_DATA (
    BookDataId INTEGER PRIMARY KEY ASC AUTOINCREMENT NOT NULL UNIQUE,
    ISBN TEXT,
    Title TEXT,
    AuthorID INTEGER REFERENCES AUTHORS(AuthorId),
    Genre TEXT,
    PublicationDate TEXT,
    PublisherId INTEGER REFERENCES PUBLISHERS(PublisherId),
    Description TEXT, 
    CoverImage TEXT

);

CREATE TABLE IF NOT EXISTS BOOKS (
    BookId INTEGER PRIMARY KEY ASC AUTOINCREMENT NOT NULL UNIQUE,
    Availability INTEGER,
    BookDataId INTEGER REFERENCES BOOK_DATA(BookDataId)
    

    -- FOREIGN KEY (AuthorID) REFERENCES AUTHORS(AuthorId),
    -- FOREIGN KEY (PublisherId) REFERENCES PUBLISHERS(PublisherId)
);


CREATE TABLE IF NOT EXISTS BORROWED_BOOKS (
    BorrowId INTEGER PRIMARY KEY ASC AUTOINCREMENT NOT NULL UNIQUE,
    BorrowedBookId INTEGER REFERENCES BOOKS(BookId),
    DueDate TEXT
    -- FOREIGN KEY (BorrowedBookId) REFERENCES BOOKS(BookId)
);  

CREATE TABLE IF NOT EXISTS NOTIFICATIONS (
    NotificationId INTEGER PRIMARY KEY ASC AUTOINCREMENT NOT NULL UNIQUE,
    UserId INTEGER REFERENCES USERS(UserId),
    NotifcationContent TEXT,
    NotificationDate TEXT,
    NotificationType INTEGER,
    NotificationRead INTEGER

    -- FOREIGN KEY (UserId) REFERENCES USERS(UserId)
);